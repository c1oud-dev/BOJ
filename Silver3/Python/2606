# 22:00 - 22:30 이후에 풀이 보고 리뷰하고 다시 품 23:55까지

from collections import deque

C, N = int(input()), int(input()) #컴퓨터 수, 컴퓨터 쌍의 수
adj = [[] for _ in range(C + 1)] #이중 리스트
visited = [False for _ in range(C + 1)] #방문 표시 확인 하기 위한 리스트(False로 초기화)

for _ in range(N):
    a, b = map(int, input().split())
    adj[a].append(b) #톱니형 리스트(가로 크기가 불규칙), append로 동적 생성 가능
    adj[b].append(a) #연결 돼 있다는 것을 체크하기 위해 번갈아 가면서 값을 넣는다.

def BFS(x):
    deq = deque([x]) #큐에 1이 들어감
    cnt = 0 #바이러스 먹은 컴퓨터 개수
    visited[x] = True #방문 표시

    while deq:
        n = deq.popleft() #왼쪽에서 값을 빼냄
        for i in adj[n]: #n이 1일 때 1과 연결된 것부터 확인
            if visited[i] == False: #방문하지 않았다면
                visited[i] = True #방문 표시하기
                deq.append(i) #오른쪽에 값을 추가한다.
                cnt += 1
    return cnt

print(BFS(1))


- BFS는 Queue를 이용해서 풀어야 한다. 
- BFS, DFS 풀 때 방문 표시와, 2중 리스트가 꼭 필요하다.
- 2중 리스트 만드는 법 기억하기
- 톱니형 리스트 만드는 법 기억하
